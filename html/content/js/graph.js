/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 283.0, "minX": 0.0, "maxY": 70364.0, "series": [{"data": [[0.0, 283.0], [0.1, 293.0], [0.2, 296.0], [0.3, 298.0], [0.4, 299.0], [0.5, 300.0], [0.6, 301.0], [0.7, 302.0], [0.8, 303.0], [0.9, 304.0], [1.0, 305.0], [1.1, 306.0], [1.2, 307.0], [1.3, 307.0], [1.4, 308.0], [1.5, 309.0], [1.6, 309.0], [1.7, 310.0], [1.8, 310.0], [1.9, 311.0], [2.0, 311.0], [2.1, 312.0], [2.2, 313.0], [2.3, 313.0], [2.4, 314.0], [2.5, 314.0], [2.6, 315.0], [2.7, 315.0], [2.8, 316.0], [2.9, 316.0], [3.0, 317.0], [3.1, 317.0], [3.2, 318.0], [3.3, 318.0], [3.4, 318.0], [3.5, 319.0], [3.6, 319.0], [3.7, 319.0], [3.8, 320.0], [3.9, 320.0], [4.0, 321.0], [4.1, 321.0], [4.2, 322.0], [4.3, 322.0], [4.4, 323.0], [4.5, 323.0], [4.6, 323.0], [4.7, 324.0], [4.8, 324.0], [4.9, 325.0], [5.0, 325.0], [5.1, 325.0], [5.2, 326.0], [5.3, 326.0], [5.4, 326.0], [5.5, 327.0], [5.6, 327.0], [5.7, 327.0], [5.8, 327.0], [5.9, 328.0], [6.0, 328.0], [6.1, 329.0], [6.2, 329.0], [6.3, 329.0], [6.4, 329.0], [6.5, 330.0], [6.6, 330.0], [6.7, 330.0], [6.8, 330.0], [6.9, 331.0], [7.0, 331.0], [7.1, 331.0], [7.2, 332.0], [7.3, 332.0], [7.4, 332.0], [7.5, 332.0], [7.6, 333.0], [7.7, 333.0], [7.8, 333.0], [7.9, 333.0], [8.0, 333.0], [8.1, 334.0], [8.2, 334.0], [8.3, 334.0], [8.4, 335.0], [8.5, 335.0], [8.6, 335.0], [8.7, 335.0], [8.8, 336.0], [8.9, 336.0], [9.0, 336.0], [9.1, 337.0], [9.2, 337.0], [9.3, 337.0], [9.4, 338.0], [9.5, 338.0], [9.6, 338.0], [9.7, 339.0], [9.8, 339.0], [9.9, 340.0], [10.0, 340.0], [10.1, 340.0], [10.2, 341.0], [10.3, 341.0], [10.4, 341.0], [10.5, 341.0], [10.6, 342.0], [10.7, 342.0], [10.8, 342.0], [10.9, 343.0], [11.0, 343.0], [11.1, 343.0], [11.2, 344.0], [11.3, 344.0], [11.4, 344.0], [11.5, 345.0], [11.6, 345.0], [11.7, 345.0], [11.8, 346.0], [11.9, 346.0], [12.0, 346.0], [12.1, 347.0], [12.2, 347.0], [12.3, 347.0], [12.4, 347.0], [12.5, 348.0], [12.6, 348.0], [12.7, 348.0], [12.8, 348.0], [12.9, 348.0], [13.0, 349.0], [13.1, 349.0], [13.2, 349.0], [13.3, 350.0], [13.4, 350.0], [13.5, 350.0], [13.6, 351.0], [13.7, 351.0], [13.8, 351.0], [13.9, 352.0], [14.0, 352.0], [14.1, 352.0], [14.2, 353.0], [14.3, 353.0], [14.4, 354.0], [14.5, 354.0], [14.6, 354.0], [14.7, 355.0], [14.8, 355.0], [14.9, 355.0], [15.0, 355.0], [15.1, 356.0], [15.2, 356.0], [15.3, 356.0], [15.4, 357.0], [15.5, 357.0], [15.6, 358.0], [15.7, 358.0], [15.8, 358.0], [15.9, 359.0], [16.0, 359.0], [16.1, 359.0], [16.2, 360.0], [16.3, 360.0], [16.4, 361.0], [16.5, 361.0], [16.6, 362.0], [16.7, 362.0], [16.8, 362.0], [16.9, 363.0], [17.0, 363.0], [17.1, 363.0], [17.2, 364.0], [17.3, 364.0], [17.4, 364.0], [17.5, 365.0], [17.6, 365.0], [17.7, 365.0], [17.8, 366.0], [17.9, 366.0], [18.0, 367.0], [18.1, 367.0], [18.2, 368.0], [18.3, 368.0], [18.4, 369.0], [18.5, 369.0], [18.6, 370.0], [18.7, 370.0], [18.8, 370.0], [18.9, 371.0], [19.0, 372.0], [19.1, 372.0], [19.2, 372.0], [19.3, 373.0], [19.4, 373.0], [19.5, 373.0], [19.6, 374.0], [19.7, 374.0], [19.8, 375.0], [19.9, 375.0], [20.0, 375.0], [20.1, 376.0], [20.2, 376.0], [20.3, 377.0], [20.4, 377.0], [20.5, 378.0], [20.6, 378.0], [20.7, 379.0], [20.8, 379.0], [20.9, 379.0], [21.0, 380.0], [21.1, 380.0], [21.2, 381.0], [21.3, 381.0], [21.4, 381.0], [21.5, 382.0], [21.6, 382.0], [21.7, 383.0], [21.8, 383.0], [21.9, 384.0], [22.0, 384.0], [22.1, 385.0], [22.2, 386.0], [22.3, 386.0], [22.4, 387.0], [22.5, 387.0], [22.6, 388.0], [22.7, 388.0], [22.8, 389.0], [22.9, 389.0], [23.0, 390.0], [23.1, 390.0], [23.2, 391.0], [23.3, 391.0], [23.4, 392.0], [23.5, 392.0], [23.6, 393.0], [23.7, 394.0], [23.8, 395.0], [23.9, 395.0], [24.0, 396.0], [24.1, 396.0], [24.2, 396.0], [24.3, 397.0], [24.4, 398.0], [24.5, 398.0], [24.6, 399.0], [24.7, 399.0], [24.8, 400.0], [24.9, 400.0], [25.0, 401.0], [25.1, 401.0], [25.2, 402.0], [25.3, 403.0], [25.4, 403.0], [25.5, 404.0], [25.6, 404.0], [25.7, 405.0], [25.8, 406.0], [25.9, 406.0], [26.0, 406.0], [26.1, 407.0], [26.2, 407.0], [26.3, 408.0], [26.4, 408.0], [26.5, 410.0], [26.6, 410.0], [26.7, 411.0], [26.8, 412.0], [26.9, 412.0], [27.0, 413.0], [27.1, 414.0], [27.2, 415.0], [27.3, 415.0], [27.4, 416.0], [27.5, 417.0], [27.6, 417.0], [27.7, 418.0], [27.8, 419.0], [27.9, 420.0], [28.0, 421.0], [28.1, 421.0], [28.2, 422.0], [28.3, 423.0], [28.4, 423.0], [28.5, 424.0], [28.6, 426.0], [28.7, 427.0], [28.8, 428.0], [28.9, 428.0], [29.0, 429.0], [29.1, 430.0], [29.2, 430.0], [29.3, 431.0], [29.4, 432.0], [29.5, 433.0], [29.6, 434.0], [29.7, 435.0], [29.8, 436.0], [29.9, 437.0], [30.0, 438.0], [30.1, 439.0], [30.2, 440.0], [30.3, 441.0], [30.4, 442.0], [30.5, 443.0], [30.6, 445.0], [30.7, 446.0], [30.8, 446.0], [30.9, 447.0], [31.0, 448.0], [31.1, 450.0], [31.2, 451.0], [31.3, 452.0], [31.4, 454.0], [31.5, 455.0], [31.6, 456.0], [31.7, 457.0], [31.8, 459.0], [31.9, 460.0], [32.0, 461.0], [32.1, 462.0], [32.2, 465.0], [32.3, 466.0], [32.4, 469.0], [32.5, 471.0], [32.6, 473.0], [32.7, 475.0], [32.8, 477.0], [32.9, 478.0], [33.0, 480.0], [33.1, 482.0], [33.2, 485.0], [33.3, 487.0], [33.4, 490.0], [33.5, 491.0], [33.6, 493.0], [33.7, 496.0], [33.8, 498.0], [33.9, 501.0], [34.0, 503.0], [34.1, 506.0], [34.2, 510.0], [34.3, 514.0], [34.4, 516.0], [34.5, 520.0], [34.6, 524.0], [34.7, 528.0], [34.8, 532.0], [34.9, 535.0], [35.0, 540.0], [35.1, 547.0], [35.2, 554.0], [35.3, 557.0], [35.4, 562.0], [35.5, 567.0], [35.6, 571.0], [35.7, 578.0], [35.8, 585.0], [35.9, 591.0], [36.0, 601.0], [36.1, 606.0], [36.2, 615.0], [36.3, 619.0], [36.4, 625.0], [36.5, 631.0], [36.6, 639.0], [36.7, 646.0], [36.8, 651.0], [36.9, 658.0], [37.0, 666.0], [37.1, 671.0], [37.2, 686.0], [37.3, 701.0], [37.4, 713.0], [37.5, 747.0], [37.6, 770.0], [37.7, 792.0], [37.8, 808.0], [37.9, 821.0], [38.0, 839.0], [38.1, 858.0], [38.2, 867.0], [38.3, 892.0], [38.4, 922.0], [38.5, 953.0], [38.6, 998.0], [38.7, 1040.0], [38.8, 1108.0], [38.9, 1162.0], [39.0, 1196.0], [39.1, 1235.0], [39.2, 1285.0], [39.3, 1303.0], [39.4, 1333.0], [39.5, 1355.0], [39.6, 1378.0], [39.7, 1402.0], [39.8, 1429.0], [39.9, 1458.0], [40.0, 1485.0], [40.1, 1522.0], [40.2, 1543.0], [40.3, 1569.0], [40.4, 1602.0], [40.5, 1625.0], [40.6, 1650.0], [40.7, 1674.0], [40.8, 1695.0], [40.9, 1709.0], [41.0, 1728.0], [41.1, 1741.0], [41.2, 1759.0], [41.3, 1774.0], [41.4, 1788.0], [41.5, 1800.0], [41.6, 1818.0], [41.7, 1829.0], [41.8, 1842.0], [41.9, 1855.0], [42.0, 1868.0], [42.1, 1879.0], [42.2, 1895.0], [42.3, 1909.0], [42.4, 1921.0], [42.5, 1932.0], [42.6, 1946.0], [42.7, 1957.0], [42.8, 1972.0], [42.9, 1981.0], [43.0, 1989.0], [43.1, 1998.0], [43.2, 2011.0], [43.3, 2022.0], [43.4, 2043.0], [43.5, 2051.0], [43.6, 2064.0], [43.7, 2077.0], [43.8, 2084.0], [43.9, 2097.0], [44.0, 2108.0], [44.1, 2120.0], [44.2, 2140.0], [44.3, 2146.0], [44.4, 2154.0], [44.5, 2161.0], [44.6, 2168.0], [44.7, 2173.0], [44.8, 2182.0], [44.9, 2187.0], [45.0, 2194.0], [45.1, 2201.0], [45.2, 2209.0], [45.3, 2210.0], [45.4, 2217.0], [45.5, 2224.0], [45.6, 2228.0], [45.7, 2234.0], [45.8, 2238.0], [45.9, 2244.0], [46.0, 2252.0], [46.1, 2257.0], [46.2, 2261.0], [46.3, 2266.0], [46.4, 2272.0], [46.5, 2278.0], [46.6, 2285.0], [46.7, 2291.0], [46.8, 2296.0], [46.9, 2299.0], [47.0, 2303.0], [47.1, 2307.0], [47.2, 2311.0], [47.3, 2315.0], [47.4, 2321.0], [47.5, 2325.0], [47.6, 2329.0], [47.7, 2336.0], [47.8, 2339.0], [47.9, 2345.0], [48.0, 2350.0], [48.1, 2355.0], [48.2, 2358.0], [48.3, 2360.0], [48.4, 2366.0], [48.5, 2369.0], [48.6, 2373.0], [48.7, 2377.0], [48.8, 2380.0], [48.9, 2381.0], [49.0, 2385.0], [49.1, 2388.0], [49.2, 2390.0], [49.3, 2393.0], [49.4, 2397.0], [49.5, 2399.0], [49.6, 2403.0], [49.7, 2405.0], [49.8, 2410.0], [49.9, 2413.0], [50.0, 2416.0], [50.1, 2419.0], [50.2, 2422.0], [50.3, 2427.0], [50.4, 2433.0], [50.5, 2436.0], [50.6, 2439.0], [50.7, 2442.0], [50.8, 2446.0], [50.9, 2449.0], [51.0, 2452.0], [51.1, 2455.0], [51.2, 2458.0], [51.3, 2462.0], [51.4, 2468.0], [51.5, 2471.0], [51.6, 2474.0], [51.7, 2476.0], [51.8, 2480.0], [51.9, 2484.0], [52.0, 2487.0], [52.1, 2491.0], [52.2, 2495.0], [52.3, 2500.0], [52.4, 2504.0], [52.5, 2510.0], [52.6, 2515.0], [52.7, 2519.0], [52.8, 2525.0], [52.9, 2529.0], [53.0, 2533.0], [53.1, 2539.0], [53.2, 2545.0], [53.3, 2549.0], [53.4, 2553.0], [53.5, 2559.0], [53.6, 2566.0], [53.7, 2568.0], [53.8, 2576.0], [53.9, 2580.0], [54.0, 2583.0], [54.1, 2589.0], [54.2, 2594.0], [54.3, 2598.0], [54.4, 2602.0], [54.5, 2605.0], [54.6, 2609.0], [54.7, 2611.0], [54.8, 2614.0], [54.9, 2618.0], [55.0, 2622.0], [55.1, 2627.0], [55.2, 2632.0], [55.3, 2638.0], [55.4, 2643.0], [55.5, 2649.0], [55.6, 2653.0], [55.7, 2656.0], [55.8, 2659.0], [55.9, 2664.0], [56.0, 2670.0], [56.1, 2675.0], [56.2, 2681.0], [56.3, 2688.0], [56.4, 2695.0], [56.5, 2700.0], [56.6, 2705.0], [56.7, 2712.0], [56.8, 2719.0], [56.9, 2726.0], [57.0, 2731.0], [57.1, 2736.0], [57.2, 2745.0], [57.3, 2751.0], [57.4, 2756.0], [57.5, 2765.0], [57.6, 2771.0], [57.7, 2778.0], [57.8, 2782.0], [57.9, 2787.0], [58.0, 2794.0], [58.1, 2803.0], [58.2, 2809.0], [58.3, 2818.0], [58.4, 2830.0], [58.5, 2842.0], [58.6, 2852.0], [58.7, 2863.0], [58.8, 2873.0], [58.9, 2879.0], [59.0, 2891.0], [59.1, 2899.0], [59.2, 2908.0], [59.3, 2920.0], [59.4, 2927.0], [59.5, 2935.0], [59.6, 2940.0], [59.7, 2945.0], [59.8, 2951.0], [59.9, 2958.0], [60.0, 2962.0], [60.1, 2968.0], [60.2, 2975.0], [60.3, 2980.0], [60.4, 2986.0], [60.5, 2993.0], [60.6, 3000.0], [60.7, 3008.0], [60.8, 3015.0], [60.9, 3018.0], [61.0, 3025.0], [61.1, 3035.0], [61.2, 3040.0], [61.3, 3045.0], [61.4, 3052.0], [61.5, 3058.0], [61.6, 3073.0], [61.7, 3080.0], [61.8, 3089.0], [61.9, 3096.0], [62.0, 3104.0], [62.1, 3108.0], [62.2, 3113.0], [62.3, 3120.0], [62.4, 3124.0], [62.5, 3131.0], [62.6, 3137.0], [62.7, 3145.0], [62.8, 3154.0], [62.9, 3161.0], [63.0, 3175.0], [63.1, 3183.0], [63.2, 3196.0], [63.3, 3204.0], [63.4, 3214.0], [63.5, 3223.0], [63.6, 3234.0], [63.7, 3243.0], [63.8, 3251.0], [63.9, 3261.0], [64.0, 3269.0], [64.1, 3281.0], [64.2, 3289.0], [64.3, 3296.0], [64.4, 3306.0], [64.5, 3315.0], [64.6, 3329.0], [64.7, 3337.0], [64.8, 3351.0], [64.9, 3367.0], [65.0, 3384.0], [65.1, 3400.0], [65.2, 3410.0], [65.3, 3418.0], [65.4, 3435.0], [65.5, 3447.0], [65.6, 3466.0], [65.7, 3481.0], [65.8, 3493.0], [65.9, 3507.0], [66.0, 3516.0], [66.1, 3529.0], [66.2, 3538.0], [66.3, 3546.0], [66.4, 3557.0], [66.5, 3567.0], [66.6, 3572.0], [66.7, 3581.0], [66.8, 3593.0], [66.9, 3602.0], [67.0, 3611.0], [67.1, 3616.0], [67.2, 3627.0], [67.3, 3638.0], [67.4, 3644.0], [67.5, 3656.0], [67.6, 3668.0], [67.7, 3681.0], [67.8, 3692.0], [67.9, 3700.0], [68.0, 3715.0], [68.1, 3735.0], [68.2, 3752.0], [68.3, 3766.0], [68.4, 3777.0], [68.5, 3791.0], [68.6, 3807.0], [68.7, 3820.0], [68.8, 3829.0], [68.9, 3844.0], [69.0, 3863.0], [69.1, 3883.0], [69.2, 3897.0], [69.3, 3917.0], [69.4, 3938.0], [69.5, 3959.0], [69.6, 3984.0], [69.7, 4021.0], [69.8, 4035.0], [69.9, 4059.0], [70.0, 4067.0], [70.1, 4080.0], [70.2, 4104.0], [70.3, 4114.0], [70.4, 4135.0], [70.5, 4152.0], [70.6, 4165.0], [70.7, 4179.0], [70.8, 4193.0], [70.9, 4204.0], [71.0, 4214.0], [71.1, 4228.0], [71.2, 4241.0], [71.3, 4265.0], [71.4, 4283.0], [71.5, 4290.0], [71.6, 4297.0], [71.7, 4303.0], [71.8, 4311.0], [71.9, 4320.0], [72.0, 4335.0], [72.1, 4355.0], [72.2, 4378.0], [72.3, 4389.0], [72.4, 4402.0], [72.5, 4412.0], [72.6, 4433.0], [72.7, 4452.0], [72.8, 4462.0], [72.9, 4482.0], [73.0, 4500.0], [73.1, 4512.0], [73.2, 4521.0], [73.3, 4531.0], [73.4, 4541.0], [73.5, 4554.0], [73.6, 4564.0], [73.7, 4570.0], [73.8, 4580.0], [73.9, 4589.0], [74.0, 4599.0], [74.1, 4606.0], [74.2, 4617.0], [74.3, 4625.0], [74.4, 4630.0], [74.5, 4634.0], [74.6, 4640.0], [74.7, 4646.0], [74.8, 4650.0], [74.9, 4654.0], [75.0, 4662.0], [75.1, 4668.0], [75.2, 4672.0], [75.3, 4677.0], [75.4, 4681.0], [75.5, 4685.0], [75.6, 4688.0], [75.7, 4695.0], [75.8, 4699.0], [75.9, 4706.0], [76.0, 4712.0], [76.1, 4717.0], [76.2, 4722.0], [76.3, 4729.0], [76.4, 4735.0], [76.5, 4740.0], [76.6, 4747.0], [76.7, 4753.0], [76.8, 4761.0], [76.9, 4768.0], [77.0, 4775.0], [77.1, 4783.0], [77.2, 4790.0], [77.3, 4797.0], [77.4, 4804.0], [77.5, 4807.0], [77.6, 4815.0], [77.7, 4823.0], [77.8, 4834.0], [77.9, 4838.0], [78.0, 4849.0], [78.1, 4854.0], [78.2, 4865.0], [78.3, 4873.0], [78.4, 4879.0], [78.5, 4884.0], [78.6, 4888.0], [78.7, 4894.0], [78.8, 4899.0], [78.9, 4904.0], [79.0, 4910.0], [79.1, 4916.0], [79.2, 4923.0], [79.3, 4930.0], [79.4, 4939.0], [79.5, 4946.0], [79.6, 4951.0], [79.7, 4957.0], [79.8, 4964.0], [79.9, 4970.0], [80.0, 4979.0], [80.1, 4984.0], [80.2, 4997.0], [80.3, 5006.0], [80.4, 5011.0], [80.5, 5015.0], [80.6, 5023.0], [80.7, 5028.0], [80.8, 5032.0], [80.9, 5044.0], [81.0, 5052.0], [81.1, 5057.0], [81.2, 5066.0], [81.3, 5074.0], [81.4, 5080.0], [81.5, 5086.0], [81.6, 5096.0], [81.7, 5104.0], [81.8, 5112.0], [81.9, 5126.0], [82.0, 5138.0], [82.1, 5144.0], [82.2, 5151.0], [82.3, 5169.0], [82.4, 5184.0], [82.5, 5195.0], [82.6, 5213.0], [82.7, 5231.0], [82.8, 5249.0], [82.9, 5266.0], [83.0, 5280.0], [83.1, 5287.0], [83.2, 5298.0], [83.3, 5310.0], [83.4, 5326.0], [83.5, 5334.0], [83.6, 5357.0], [83.7, 5367.0], [83.8, 5380.0], [83.9, 5393.0], [84.0, 5409.0], [84.1, 5424.0], [84.2, 5443.0], [84.3, 5452.0], [84.4, 5463.0], [84.5, 5477.0], [84.6, 5489.0], [84.7, 5498.0], [84.8, 5526.0], [84.9, 5542.0], [85.0, 5553.0], [85.1, 5567.0], [85.2, 5593.0], [85.3, 5623.0], [85.4, 5645.0], [85.5, 5673.0], [85.6, 5701.0], [85.7, 5734.0], [85.8, 5761.0], [85.9, 5790.0], [86.0, 5847.0], [86.1, 5889.0], [86.2, 5914.0], [86.3, 5963.0], [86.4, 6015.0], [86.5, 6052.0], [86.6, 6117.0], [86.7, 6192.0], [86.8, 6250.0], [86.9, 6273.0], [87.0, 6289.0], [87.1, 6308.0], [87.2, 6332.0], [87.3, 6352.0], [87.4, 6374.0], [87.5, 6386.0], [87.6, 6400.0], [87.7, 6419.0], [87.8, 6433.0], [87.9, 6455.0], [88.0, 6479.0], [88.1, 6498.0], [88.2, 6519.0], [88.3, 6545.0], [88.4, 6577.0], [88.5, 6611.0], [88.6, 6649.0], [88.7, 6671.0], [88.8, 6715.0], [88.9, 6747.0], [89.0, 6781.0], [89.1, 6809.0], [89.2, 6852.0], [89.3, 6897.0], [89.4, 6943.0], [89.5, 6980.0], [89.6, 7004.0], [89.7, 7024.0], [89.8, 7053.0], [89.9, 7082.0], [90.0, 7109.0], [90.1, 7126.0], [90.2, 7145.0], [90.3, 7171.0], [90.4, 7208.0], [90.5, 7238.0], [90.6, 7276.0], [90.7, 7315.0], [90.8, 7348.0], [90.9, 7367.0], [91.0, 7397.0], [91.1, 7416.0], [91.2, 7442.0], [91.3, 7473.0], [91.4, 7495.0], [91.5, 7525.0], [91.6, 7549.0], [91.7, 7571.0], [91.8, 7597.0], [91.9, 7623.0], [92.0, 7674.0], [92.1, 7725.0], [92.2, 7760.0], [92.3, 7813.0], [92.4, 7938.0], [92.5, 8022.0], [92.6, 8182.0], [92.7, 8359.0], [92.8, 8490.0], [92.9, 8647.0], [93.0, 8897.0], [93.1, 9365.0], [93.2, 9803.0], [93.3, 10017.0], [93.4, 10209.0], [93.5, 10428.0], [93.6, 10609.0], [93.7, 10816.0], [93.8, 11024.0], [93.9, 11095.0], [94.0, 11155.0], [94.1, 11200.0], [94.2, 11366.0], [94.3, 11560.0], [94.4, 11904.0], [94.5, 12094.0], [94.6, 12427.0], [94.7, 12659.0], [94.8, 13075.0], [94.9, 13671.0], [95.0, 14092.0], [95.1, 14571.0], [95.2, 15076.0], [95.3, 15629.0], [95.4, 16716.0], [95.5, 17403.0], [95.6, 18414.0], [95.7, 19013.0], [95.8, 19537.0], [95.9, 20531.0], [96.0, 21454.0], [96.1, 23381.0], [96.2, 24277.0], [96.3, 25161.0], [96.4, 25641.0], [96.5, 26355.0], [96.6, 27668.0], [96.7, 28306.0], [96.8, 28839.0], [96.9, 29847.0], [97.0, 30810.0], [97.1, 31302.0], [97.2, 31977.0], [97.3, 32576.0], [97.4, 33441.0], [97.5, 33910.0], [97.6, 34597.0], [97.7, 35355.0], [97.8, 36094.0], [97.9, 36817.0], [98.0, 37652.0], [98.1, 38252.0], [98.2, 39101.0], [98.3, 39982.0], [98.4, 41390.0], [98.5, 42948.0], [98.6, 44244.0], [98.7, 45275.0], [98.8, 46419.0], [98.9, 47564.0], [99.0, 48632.0], [99.1, 49477.0], [99.2, 50814.0], [99.3, 51775.0], [99.4, 52779.0], [99.5, 54200.0], [99.6, 55733.0], [99.7, 57921.0], [99.8, 60003.0], [99.9, 61737.0], [100.0, 70364.0]], "isOverall": false, "label": "Blazedemo - Get", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 3367.0, "series": [{"data": [[32900.0, 1.0], [33700.0, 3.0], [34500.0, 2.0], [35300.0, 1.0], [36100.0, 2.0], [36900.0, 3.0], [37700.0, 2.0], [38500.0, 1.0], [40100.0, 3.0], [40900.0, 1.0], [45700.0, 2.0], [46500.0, 2.0], [48100.0, 2.0], [48900.0, 2.0], [49700.0, 1.0], [50500.0, 3.0], [52900.0, 1.0], [200.0, 59.0], [51300.0, 1.0], [53700.0, 1.0], [56100.0, 1.0], [56900.0, 1.0], [57700.0, 1.0], [60900.0, 2.0], [61700.0, 1.0], [300.0, 3367.0], [400.0, 1256.0], [500.0, 296.0], [600.0, 179.0], [700.0, 62.0], [800.0, 84.0], [900.0, 37.0], [1000.0, 26.0], [1100.0, 30.0], [1200.0, 38.0], [1300.0, 56.0], [1400.0, 50.0], [1500.0, 46.0], [1600.0, 62.0], [1700.0, 91.0], [1800.0, 102.0], [1900.0, 125.0], [2000.0, 113.0], [2100.0, 154.0], [2200.0, 256.0], [2300.0, 360.0], [2400.0, 384.0], [2500.0, 281.0], [2600.0, 300.0], [2700.0, 215.0], [2800.0, 147.0], [2900.0, 202.0], [3000.0, 194.0], [3100.0, 176.0], [3200.0, 151.0], [3300.0, 105.0], [3400.0, 103.0], [3500.0, 144.0], [3600.0, 140.0], [3700.0, 91.0], [3800.0, 92.0], [3900.0, 59.0], [4000.0, 75.0], [4100.0, 93.0], [4200.0, 111.0], [4300.0, 100.0], [4400.0, 85.0], [4600.0, 249.0], [4500.0, 140.0], [4700.0, 213.0], [4800.0, 203.0], [4900.0, 197.0], [5000.0, 196.0], [5100.0, 121.0], [5300.0, 100.0], [5200.0, 94.0], [5500.0, 70.0], [5600.0, 54.0], [5400.0, 107.0], [5700.0, 43.0], [5800.0, 33.0], [5900.0, 31.0], [6000.0, 29.0], [6100.0, 19.0], [6300.0, 78.0], [6200.0, 43.0], [6400.0, 71.0], [6500.0, 51.0], [6600.0, 38.0], [6800.0, 29.0], [6700.0, 47.0], [6900.0, 38.0], [7000.0, 53.0], [7100.0, 58.0], [7300.0, 53.0], [7400.0, 53.0], [7200.0, 37.0], [7600.0, 35.0], [7500.0, 57.0], [7700.0, 28.0], [7900.0, 16.0], [7800.0, 12.0], [8000.0, 10.0], [8100.0, 8.0], [8200.0, 9.0], [8400.0, 11.0], [8600.0, 5.0], [9000.0, 1.0], [9200.0, 2.0], [8800.0, 7.0], [9400.0, 7.0], [9800.0, 8.0], [10000.0, 8.0], [10200.0, 7.0], [10400.0, 6.0], [10600.0, 6.0], [11000.0, 21.0], [11200.0, 7.0], [10800.0, 6.0], [11400.0, 7.0], [11600.0, 5.0], [12000.0, 8.0], [12200.0, 3.0], [11800.0, 3.0], [12600.0, 3.0], [12400.0, 5.0], [13000.0, 6.0], [13200.0, 4.0], [12800.0, 3.0], [13800.0, 1.0], [13400.0, 3.0], [13600.0, 2.0], [14200.0, 2.0], [14000.0, 6.0], [14400.0, 4.0], [14800.0, 3.0], [14600.0, 2.0], [15000.0, 3.0], [15200.0, 4.0], [15600.0, 3.0], [15400.0, 2.0], [16000.0, 1.0], [16200.0, 1.0], [17200.0, 3.0], [16800.0, 2.0], [17600.0, 4.0], [18400.0, 1.0], [18000.0, 1.0], [19200.0, 2.0], [18800.0, 1.0], [20000.0, 1.0], [21200.0, 2.0], [20800.0, 1.0], [22000.0, 1.0], [22800.0, 1.0], [24000.0, 3.0], [23600.0, 2.0], [24400.0, 2.0], [24800.0, 2.0], [25600.0, 7.0], [26000.0, 3.0], [27600.0, 2.0], [26800.0, 1.0], [28400.0, 1.0], [28800.0, 3.0], [29600.0, 2.0], [29200.0, 1.0], [30400.0, 2.0], [31600.0, 1.0], [30800.0, 1.0], [31200.0, 1.0], [32000.0, 3.0], [32400.0, 1.0], [33600.0, 3.0], [34400.0, 2.0], [36800.0, 1.0], [35200.0, 2.0], [36000.0, 3.0], [38400.0, 1.0], [37600.0, 1.0], [39200.0, 2.0], [41600.0, 1.0], [44800.0, 2.0], [44000.0, 1.0], [46400.0, 2.0], [48800.0, 3.0], [48000.0, 2.0], [47200.0, 1.0], [49600.0, 2.0], [51200.0, 2.0], [52000.0, 1.0], [52800.0, 1.0], [55200.0, 1.0], [58400.0, 1.0], [60800.0, 1.0], [60000.0, 2.0], [62400.0, 2.0], [63200.0, 1.0], [64800.0, 1.0], [64000.0, 1.0], [70300.0, 1.0], [33900.0, 2.0], [33100.0, 3.0], [34700.0, 1.0], [35500.0, 1.0], [36300.0, 1.0], [37900.0, 2.0], [38700.0, 1.0], [37100.0, 3.0], [39500.0, 1.0], [42700.0, 1.0], [41900.0, 2.0], [43500.0, 2.0], [44300.0, 1.0], [45900.0, 2.0], [45100.0, 2.0], [46700.0, 1.0], [49100.0, 2.0], [47500.0, 1.0], [50700.0, 1.0], [51500.0, 2.0], [53100.0, 1.0], [52300.0, 1.0], [53900.0, 2.0], [57100.0, 1.0], [57900.0, 2.0], [58700.0, 2.0], [60300.0, 3.0], [62700.0, 1.0], [64300.0, 1.0], [16900.0, 1.0], [17300.0, 2.0], [16500.0, 2.0], [18100.0, 1.0], [19300.0, 2.0], [18500.0, 2.0], [18900.0, 3.0], [19700.0, 2.0], [20500.0, 4.0], [20900.0, 2.0], [21300.0, 1.0], [22500.0, 3.0], [23300.0, 1.0], [24500.0, 1.0], [24100.0, 1.0], [24900.0, 3.0], [25300.0, 2.0], [25700.0, 2.0], [26500.0, 1.0], [26100.0, 1.0], [26900.0, 1.0], [27300.0, 1.0], [27700.0, 2.0], [28100.0, 1.0], [28900.0, 2.0], [30100.0, 4.0], [29700.0, 1.0], [30500.0, 1.0], [31300.0, 3.0], [30900.0, 3.0], [31700.0, 1.0], [32500.0, 4.0], [32100.0, 2.0], [34600.0, 2.0], [33800.0, 1.0], [33000.0, 2.0], [36200.0, 1.0], [35400.0, 3.0], [37800.0, 5.0], [38600.0, 3.0], [37000.0, 1.0], [40200.0, 1.0], [39400.0, 3.0], [41000.0, 2.0], [41800.0, 1.0], [43400.0, 1.0], [44200.0, 4.0], [46600.0, 2.0], [47400.0, 3.0], [49000.0, 1.0], [50600.0, 1.0], [51400.0, 1.0], [52200.0, 3.0], [53000.0, 1.0], [56200.0, 1.0], [55400.0, 1.0], [58600.0, 1.0], [57800.0, 1.0], [60200.0, 1.0], [61800.0, 1.0], [65900.0, 1.0], [34100.0, 1.0], [33300.0, 1.0], [34900.0, 1.0], [35700.0, 2.0], [36500.0, 2.0], [37300.0, 2.0], [38100.0, 1.0], [38900.0, 1.0], [40500.0, 3.0], [39700.0, 1.0], [42900.0, 2.0], [41300.0, 2.0], [43700.0, 2.0], [44500.0, 1.0], [46100.0, 3.0], [47700.0, 2.0], [48500.0, 1.0], [49300.0, 2.0], [50900.0, 3.0], [50100.0, 1.0], [51700.0, 3.0], [52500.0, 1.0], [54100.0, 2.0], [55700.0, 2.0], [56500.0, 2.0], [58900.0, 1.0], [60500.0, 2.0], [59700.0, 1.0], [8500.0, 9.0], [8700.0, 4.0], [8300.0, 9.0], [8900.0, 7.0], [9100.0, 2.0], [9700.0, 3.0], [9500.0, 2.0], [9300.0, 3.0], [9900.0, 5.0], [10100.0, 5.0], [10500.0, 9.0], [10300.0, 7.0], [10700.0, 7.0], [10900.0, 6.0], [11100.0, 23.0], [11500.0, 4.0], [11300.0, 12.0], [11700.0, 4.0], [11900.0, 7.0], [12100.0, 2.0], [12300.0, 7.0], [12500.0, 7.0], [12700.0, 2.0], [13300.0, 4.0], [12900.0, 3.0], [13100.0, 2.0], [13700.0, 3.0], [14300.0, 5.0], [14100.0, 1.0], [13900.0, 3.0], [14500.0, 3.0], [14700.0, 2.0], [14900.0, 3.0], [15300.0, 2.0], [15100.0, 2.0], [15700.0, 3.0], [15500.0, 2.0], [16300.0, 2.0], [16100.0, 1.0], [15900.0, 1.0], [17400.0, 2.0], [17000.0, 1.0], [17800.0, 2.0], [18200.0, 2.0], [19400.0, 4.0], [19000.0, 2.0], [18600.0, 3.0], [19800.0, 2.0], [20200.0, 1.0], [21000.0, 2.0], [20600.0, 1.0], [21400.0, 3.0], [22200.0, 1.0], [23400.0, 1.0], [22600.0, 1.0], [23000.0, 2.0], [24200.0, 3.0], [23800.0, 3.0], [24600.0, 3.0], [25400.0, 5.0], [26200.0, 1.0], [27400.0, 2.0], [27000.0, 1.0], [28600.0, 6.0], [28200.0, 3.0], [27800.0, 4.0], [29400.0, 2.0], [29800.0, 1.0], [30200.0, 2.0], [30600.0, 1.0], [31000.0, 4.0], [31400.0, 1.0], [32600.0, 3.0], [31800.0, 2.0], [32200.0, 3.0], [34800.0, 1.0], [34000.0, 4.0], [35600.0, 2.0], [36400.0, 1.0], [38800.0, 4.0], [38000.0, 2.0], [37200.0, 2.0], [39600.0, 1.0], [40400.0, 1.0], [41200.0, 1.0], [42800.0, 3.0], [44400.0, 1.0], [43600.0, 1.0], [45200.0, 3.0], [46800.0, 2.0], [46000.0, 1.0], [48400.0, 1.0], [47600.0, 1.0], [50800.0, 1.0], [49200.0, 1.0], [53200.0, 1.0], [51600.0, 1.0], [54800.0, 1.0], [57200.0, 1.0], [55600.0, 3.0], [56400.0, 2.0], [58800.0, 2.0], [59600.0, 1.0], [61200.0, 1.0], [62000.0, 1.0], [33500.0, 4.0], [34300.0, 2.0], [35100.0, 3.0], [36700.0, 1.0], [35900.0, 4.0], [38300.0, 1.0], [39900.0, 1.0], [39100.0, 3.0], [41500.0, 1.0], [43100.0, 1.0], [43900.0, 3.0], [45500.0, 1.0], [46300.0, 1.0], [47900.0, 1.0], [49500.0, 2.0], [51100.0, 1.0], [52700.0, 3.0], [53500.0, 2.0], [54300.0, 2.0], [55900.0, 2.0], [61500.0, 1.0], [16700.0, 4.0], [17100.0, 1.0], [17900.0, 2.0], [18700.0, 4.0], [19100.0, 3.0], [19500.0, 4.0], [20300.0, 1.0], [21500.0, 2.0], [20700.0, 2.0], [22700.0, 2.0], [23900.0, 1.0], [24300.0, 1.0], [25100.0, 3.0], [25500.0, 2.0], [26300.0, 5.0], [26700.0, 2.0], [27500.0, 1.0], [27900.0, 3.0], [28300.0, 2.0], [29500.0, 4.0], [28700.0, 4.0], [30700.0, 1.0], [30300.0, 1.0], [29900.0, 1.0], [31500.0, 2.0], [31100.0, 4.0], [32300.0, 1.0], [31900.0, 5.0], [32700.0, 2.0], [33400.0, 4.0], [34200.0, 2.0], [36600.0, 4.0], [35000.0, 2.0], [37400.0, 2.0], [38200.0, 3.0], [39800.0, 2.0], [42200.0, 1.0], [41400.0, 2.0], [44600.0, 2.0], [43800.0, 1.0], [45400.0, 2.0], [46200.0, 1.0], [48600.0, 2.0], [47800.0, 3.0], [49400.0, 3.0], [50200.0, 1.0], [52600.0, 3.0], [51800.0, 2.0], [54200.0, 4.0], [55000.0, 1.0], [58200.0, 1.0], [59000.0, 1.0], [60600.0, 1.0], [59800.0, 1.0], [63000.0, 1.0], [65400.0, 1.0]], "isOverall": false, "label": "Blazedemo - Get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 70300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8287.0, "series": [{"data": [[0.0, 4689.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 852.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 8287.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 5.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.6105575E12, "maxY": 327.3234721681597, "series": [{"data": [[1.61055756E12, 281.26011264720944], [1.6105575E12, 239.29655172413797], [1.61055762E12, 25.0204081632653]], "isOverall": false, "label": "Load Test", "isController": false}, {"data": [[1.61055756E12, 196.54430379746825], [1.6105575E12, 100.0], [1.61055762E12, 13.0]], "isOverall": false, "label": "Spike Test", "isController": false}, {"data": [[1.61055756E12, 160.0], [1.61055768E12, 2.0], [1.6105575E12, 160.0], [1.61055762E12, 157.28307760729365]], "isOverall": false, "label": "Soak Test", "isController": false}, {"data": [[1.61055756E12, 327.3234721681597], [1.6105575E12, 75.62820512820517], [1.61055762E12, 35.01449275362318]], "isOverall": false, "label": "Stress Test", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61055768E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 288.0, "minX": 1.0, "maxY": 58771.0, "series": [{"data": [[2.0, 25143.0], [3.0, 21065.0], [4.0, 12561.0], [5.0, 11518.0], [6.0, 23088.0], [7.0, 13239.0], [8.0, 14678.0], [9.0, 23061.0], [10.0, 22569.0], [11.0, 12884.0], [12.0, 24974.0], [13.0, 10896.0], [14.0, 24152.0], [15.0, 10123.0], [16.0, 11426.0], [17.0, 20898.0], [18.0, 27461.0], [19.0, 10535.0], [20.0, 12035.0], [21.0, 10083.0], [22.0, 9590.0], [23.0, 26337.0], [24.0, 15578.0], [25.0, 12495.0], [26.0, 9722.0], [27.0, 10538.0], [28.0, 10078.0], [29.0, 11382.0], [30.0, 12406.0], [31.0, 12427.0], [33.0, 11366.0], [32.0, 11006.0], [35.0, 10024.0], [34.0, 10018.0], [37.0, 13012.0], [36.0, 11282.0], [39.0, 12810.0], [38.0, 12514.0], [41.0, 13671.0], [40.0, 11937.0], [43.0, 15358.0], [42.0, 14966.0], [45.0, 10708.0], [44.0, 12094.0], [47.0, 12393.0], [46.0, 14053.0], [49.0, 10811.0], [48.0, 11680.0], [51.0, 13958.0], [50.0, 14030.0], [53.0, 13075.0], [52.0, 15171.0], [55.0, 13676.0], [54.0, 11444.0], [57.0, 12755.0], [56.0, 24909.0], [59.0, 4946.0], [58.0, 3524.0], [61.0, 15076.0], [60.0, 5601.0], [63.0, 5851.0], [62.0, 10671.0], [67.0, 13126.0], [66.0, 5660.0], [65.0, 5722.0], [64.0, 14571.0], [71.0, 10013.0], [70.0, 12731.0], [69.0, 14336.0], [68.0, 3534.0], [75.0, 10079.0], [74.0, 9930.0], [73.0, 12576.0], [72.0, 10337.0], [79.0, 10343.0], [78.0, 4743.0], [77.0, 11030.0], [76.0, 10206.0], [83.0, 14367.0], [82.0, 5296.0], [81.0, 4858.0], [80.0, 9826.0], [87.0, 435.0], [86.0, 12353.0], [85.0, 13322.0], [84.0, 15504.0], [90.0, 440.0], [89.0, 426.5], [95.0, 439.0], [93.0, 453.3333333333333], [99.0, 426.0], [98.0, 491.0], [97.0, 429.0], [96.0, 444.0], [103.0, 399.0], [102.0, 412.0], [100.0, 412.0], [106.0, 383.0], [104.0, 379.0], [110.0, 384.0], [109.0, 416.0], [108.0, 6185.5], [115.0, 330.0], [114.0, 352.0], [113.0, 359.0], [119.0, 419.0], [118.0, 330.0], [117.0, 12106.0], [116.0, 386.0], [122.0, 355.0], [120.0, 342.0], [125.0, 353.0], [124.0, 352.5], [135.0, 361.0], [134.0, 356.0], [133.0, 332.0], [132.0, 355.0], [131.0, 379.3333333333333], [128.0, 341.0], [143.0, 312.0], [142.0, 309.0], [141.0, 315.0], [140.0, 317.0], [139.0, 318.0], [138.0, 300.0], [137.0, 337.0], [149.0, 363.0], [148.0, 337.0], [147.0, 5045.5], [145.0, 288.0], [144.0, 296.0], [159.0, 494.0], [158.0, 10768.0], [157.0, 334.0], [155.0, 3516.0], [154.0, 498.0], [153.0, 355.0], [167.0, 2883.477272727273], [166.0, 3693.7619047619046], [165.0, 2214.75], [164.0, 25279.5], [163.0, 1537.5191256830597], [162.0, 1413.3627118644072], [161.0, 2115.44262295082], [160.0, 1269.2859069453814], [175.0, 24517.333333333332], [173.0, 3204.2048192771085], [172.0, 2455.826086956522], [171.0, 6799.5], [170.0, 4282.285714285715], [169.0, 2648.888888888889], [168.0, 2366.585987261147], [183.0, 4302.222222222223], [182.0, 2566.181818181818], [181.0, 1748.2325581395353], [180.0, 4065.2857142857138], [179.0, 6418.52], [177.0, 3561.95652173913], [176.0, 3902.972972972973], [191.0, 13175.75], [190.0, 11663.0], [189.0, 2094.9054054054054], [188.0, 5305.736842105263], [187.0, 5374.090909090909], [186.0, 9004.0], [185.0, 6840.666666666667], [184.0, 20085.0], [199.0, 5225.411764705883], [198.0, 11212.5], [197.0, 3886.9473684210525], [195.0, 3396.4571428571426], [194.0, 30204.0], [193.0, 12249.0], [192.0, 2405.2051282051275], [207.0, 5501.5], [206.0, 2616.9411764705883], [205.0, 7992.000000000001], [204.0, 4024.65625], [203.0, 11483.4], [202.0, 4849.7692307692305], [201.0, 3253.791666666667], [200.0, 2558.0740740740744], [215.0, 2981.692307692308], [214.0, 5295.375], [213.0, 14366.25], [212.0, 8365.625], [211.0, 1755.2121212121215], [210.0, 7988.999999999999], [209.0, 4102.3], [208.0, 5848.428571428572], [223.0, 3916.8823529411766], [222.0, 12690.333333333334], [221.0, 16777.25], [220.0, 7352.2307692307695], [219.0, 3749.6], [218.0, 4014.467741935483], [217.0, 2789.416666666667], [216.0, 2482.833333333333], [231.0, 2465.3333333333335], [230.0, 8239.5], [229.0, 2849.4285714285716], [228.0, 6064.625], [227.0, 3261.0000000000005], [226.0, 22055.5], [225.0, 3079.166666666667], [224.0, 14857.5], [239.0, 3693.3636363636365], [238.0, 4005.6666666666665], [237.0, 13367.2], [236.0, 4102.266666666666], [235.0, 4186.142857142857], [234.0, 14493.333333333334], [233.0, 3434.052631578947], [232.0, 3190.227272727273], [247.0, 2070.5535714285716], [246.0, 2686.3076923076924], [245.0, 26385.5], [244.0, 2127.2105263157896], [243.0, 40028.333333333336], [242.0, 21398.666666666668], [241.0, 11449.0], [240.0, 4048.7586206896553], [255.0, 2128.6388888888887], [254.0, 2030.2631578947369], [253.0, 1390.4117647058824], [252.0, 34312.0], [251.0, 10878.0], [250.0, 5290.833333333333], [249.0, 8658.307692307693], [248.0, 6079.333333333333], [270.0, 5001.624999999999], [271.0, 19451.0], [269.0, 10919.4], [268.0, 9173.0], [267.0, 2843.85], [266.0, 3572.0588235294117], [265.0, 16274.5], [264.0, 3657.266666666667], [263.0, 3211.3529411764707], [257.0, 13016.0], [256.0, 4781.545454545454], [259.0, 4302.0], [258.0, 12338.2], [262.0, 1108.5365853658536], [261.0, 6496.3], [260.0, 5720.038461538463], [286.0, 15429.166666666666], [287.0, 3180.0], [285.0, 55642.0], [284.0, 8138.333333333334], [283.0, 46555.0], [282.0, 1103.5882352941176], [281.0, 2901.9285714285716], [280.0, 7762.125], [279.0, 27824.0], [273.0, 2303.4074074074074], [272.0, 4039.9000000000005], [275.0, 6856.6], [274.0, 4567.571428571428], [278.0, 4635.454545454545], [277.0, 2612.9285714285716], [276.0, 5116.7], [302.0, 3020.9583333333335], [303.0, 1141.9333333333332], [301.0, 4319.333333333333], [300.0, 1328.5263157894735], [299.0, 9001.5], [298.0, 6595.947368421052], [297.0, 5164.636363636363], [296.0, 37339.0], [295.0, 26781.0], [289.0, 3414.9333333333334], [288.0, 2923.75], [291.0, 1527.7209302325582], [290.0, 58771.0], [294.0, 15231.5], [293.0, 15892.75], [292.0, 4395.692307692308], [318.0, 2505.1], [319.0, 5699.166666666667], [317.0, 7028.0], [316.0, 4537.727272727273], [315.0, 9400.25], [314.0, 15648.25], [313.0, 3385.0909090909086], [312.0, 20397.0], [311.0, 1400.2352941176468], [305.0, 2687.6111111111113], [304.0, 6407.500000000001], [307.0, 3251.5312500000005], [306.0, 11742.666666666668], [310.0, 5111.583333333334], [309.0, 4864.285714285714], [308.0, 2492.375], [334.0, 5556.5], [335.0, 2925.25], [333.0, 3360.5714285714284], [332.0, 3640.9166666666665], [331.0, 19234.333333333336], [330.0, 3370.625], [329.0, 1051.9615384615386], [328.0, 1962.7179487179487], [327.0, 23053.0], [321.0, 2217.5], [320.0, 3373.5999999999995], [323.0, 2043.7857142857142], [322.0, 3341.25], [326.0, 29654.5], [325.0, 16610.333333333336], [324.0, 1300.872340425532], [350.0, 12673.5], [336.0, 2626.6], [343.0, 5186.5], [342.0, 1072.1875], [341.0, 5923.25], [340.0, 2112.0], [337.0, 4181.666666666667], [338.0, 2668.3999999999996], [346.0, 1218.6666666666665], [347.0, 1614.0], [351.0, 7290.333333333333], [348.0, 1764.4666666666667], [339.0, 6841.5], [345.0, 3849.0], [344.0, 1502.0000000000002], [353.0, 1794.0], [352.0, 1762.0], [354.0, 4551.444444444444], [355.0, 11115.0], [364.0, 3017.166666666667], [365.0, 2009.1666666666667], [366.0, 3234.5333333333333], [367.0, 11074.5], [356.0, 3660.2], [357.0, 1805.5], [359.0, 1931.0], [358.0, 11441.333333333334], [360.0, 4086.7333333333336], [361.0, 8061.222222222223], [362.0, 2024.6666666666667], [363.0, 12726.666666666666], [369.0, 2198.2499999999995], [368.0, 2162.0], [371.0, 8379.0], [380.0, 2497.0], [382.0, 3605.166666666667], [381.0, 7629.333333333333], [383.0, 5148.6], [372.0, 2222.0], [373.0, 3004.2], [374.0, 4218.3], [375.0, 3398.9333333333334], [376.0, 3564.5], [377.0, 2414.3333333333335], [378.0, 2413.0], [379.0, 6200.3], [396.0, 2564.0], [385.0, 2369.0], [387.0, 2557.25], [386.0, 21374.0], [389.0, 4071.4], [388.0, 7570.333333333333], [391.0, 11406.0], [390.0, 2311.166666666667], [392.0, 3687.125], [399.0, 3396.7], [398.0, 3578.5], [395.0, 7749.333333333333], [393.0, 3491.0], [400.0, 6218.545454545455], [402.0, 3077.0], [403.0, 5738.428571428572], [404.0, 3334.9999999999995], [405.0, 9126.142857142857], [406.0, 5359.0], [407.0, 2270.714285714286], [410.0, 3268.0], [411.0, 3947.6818181818185], [412.0, 3040.1666666666665], [414.0, 2556.0666666666666], [413.0, 9564.833333333334], [415.0, 2925.25], [409.0, 5503.2], [408.0, 1669.1666666666667], [418.0, 9512.615384615387], [419.0, 2227.7], [428.0, 3352.0], [429.0, 2438.2999999999997], [430.0, 2972.1111111111113], [420.0, 9885.714285714286], [421.0, 2736.714285714286], [422.0, 4541.25], [423.0, 3927.6666666666665], [417.0, 2119.5714285714284], [416.0, 7817.0], [424.0, 1989.8260869565217], [425.0, 3573.2], [427.0, 3147.0], [426.0, 7476.0], [433.0, 4880.666666666666], [432.0, 2579.875], [434.0, 2893.857142857143], [435.0, 17557.333333333332], [445.0, 8815.0], [444.0, 7387.0], [446.0, 5675.222222222223], [447.0, 2881.6666666666665], [436.0, 2931.25], [437.0, 3433.0], [438.0, 2792.625], [439.0, 3341.3333333333335], [440.0, 4905.0], [441.0, 2607.0], [442.0, 4475.0], [443.0, 2172.285714285714], [450.0, 2722.2], [448.0, 11090.333333333334], [449.0, 2785.6666666666665], [451.0, 3015.6666666666665], [460.0, 1078.6923076923076], [461.0, 3251.5454545454545], [462.0, 1879.8], [463.0, 10041.400000000001], [452.0, 2853.6666666666665], [453.0, 11389.333333333332], [454.0, 2581.6], [455.0, 1686.0], [456.0, 10074.833333333334], [457.0, 1396.3333333333333], [458.0, 3493.8], [459.0, 2244.1111111111113], [465.0, 2087.4166666666665], [464.0, 13310.4], [466.0, 3596.2777777777774], [476.0, 3715.6666666666665], [467.0, 4956.5], [477.0, 4049.375], [479.0, 3229.727272727273], [468.0, 1453.769230769231], [469.0, 6062.307692307692], [471.0, 2806.5], [470.0, 3540.0], [472.0, 11165.375], [473.0, 13304.0], [474.0, 1888.3529411764707], [475.0, 2158.5714285714284], [482.0, 1054.2500000000002], [480.0, 2118.272727272727], [481.0, 8300.142857142857], [483.0, 3877.5555555555557], [492.0, 3770.2222222222226], [495.0, 3076.416666666667], [494.0, 1035.2142857142858], [493.0, 2359.25], [484.0, 8779.0], [485.0, 7475.0], [486.0, 1517.0], [487.0, 2575.714285714286], [488.0, 7271.5], [489.0, 9223.166666666666], [491.0, 2456.1111111111113], [490.0, 8292.4], [497.0, 1485.3888888888891], [496.0, 7520.6], [498.0, 3024.285714285714], [499.0, 5952.4], [500.0, 11648.4], [501.0, 1388.8], [502.0, 1399.0], [503.0, 1343.5], [504.0, 1874.2222222222222], [511.0, 2729.0], [510.0, 10341.2], [508.0, 9517.0], [509.0, 2203.125], [505.0, 1943.8333333333333], [507.0, 1915.2], [506.0, 2830.25], [514.0, 8022.374999999999], [523.0, 2224.6000000000004], [513.0, 1225.25], [527.0, 1595.3], [526.0, 4403.0], [524.0, 14317.0], [525.0, 15290.428571428572], [515.0, 10383.2], [517.0, 5373.0], [516.0, 25439.0], [518.0, 2257.2], [519.0, 6937.499999999999], [536.0, 1812.2], [537.0, 1587.5714285714284], [538.0, 1167.5], [539.0, 911.0], [540.0, 2993.75], [541.0, 7086.4], [542.0, 1799.142857142857], [543.0, 1577.857142857143], [528.0, 6904.818181818182], [529.0, 2267.3636363636365], [530.0, 27465.5], [531.0, 2086.166666666667], [533.0, 2709.142857142857], [535.0, 2730.0], [520.0, 2819.75], [521.0, 3231.666666666667], [522.0, 2110.0], [550.0, 1859.4444444444443], [546.0, 2133.222222222222], [545.0, 2843.2], [544.0, 5532.0], [558.0, 1861.3333333333333], [559.0, 1499.1666666666667], [555.0, 3035.0], [556.0, 1571.5], [547.0, 1693.0], [548.0, 815.5], [549.0, 13847.75], [551.0, 3538.166666666667], [568.0, 1200.75], [569.0, 2347.285714285714], [570.0, 2509.222222222222], [572.0, 1778.7777777777778], [571.0, 4713.5], [573.0, 2512.25], [574.0, 1236.3076923076924], [575.0, 3654.166666666667], [560.0, 1012.6666666666666], [561.0, 12553.2], [562.0, 2473.0], [564.0, 1965.4444444444443], [563.0, 4311.0], [565.0, 3712.5], [566.0, 1412.6666666666667], [567.0, 4632.0], [552.0, 1892.0], [553.0, 4430.5], [554.0, 1377.0], [582.0, 3644.6666666666665], [578.0, 3831.75], [577.0, 2253.5], [591.0, 4150.833333333334], [576.0, 4502.0], [588.0, 2953.0], [589.0, 5071.6], [579.0, 4301.666666666667], [580.0, 1601.125], [581.0, 4040.833333333333], [583.0, 992.0], [600.0, 3177.6666666666665], [601.0, 15689.833333333332], [602.0, 4754.0], [603.0, 1266.0], [604.0, 1818.2], [605.0, 2859.0], [606.0, 1316.5], [607.0, 2400.5], [592.0, 3134.625], [593.0, 1586.25], [594.0, 4658.5], [595.0, 3176.3333333333335], [596.0, 1288.0], [597.0, 2663.6666666666665], [599.0, 1409.0], [598.0, 4614.8], [584.0, 2914.25], [585.0, 14314.25], [587.0, 2157.4], [615.0, 2703.5], [611.0, 6008.0], [608.0, 4519.222222222223], [622.0, 5163.857142857143], [623.0, 8152.0], [619.0, 2322.5], [618.0, 4773.0], [620.0, 3312.0], [609.0, 2161.285714285714], [610.0, 5586.5], [612.0, 9410.714285714286], [613.0, 1395.25], [614.0, 2835.3333333333335], [624.0, 4195.222222222223], [639.0, 5178.285714285715], [637.0, 3236.5], [638.0, 3637.5], [634.0, 2781.9999999999995], [635.0, 6137.0], [636.0, 2803.75], [632.0, 3070.0], [633.0, 3695.3636363636365], [625.0, 3307.0], [628.0, 3762.333333333333], [627.0, 4723.5], [629.0, 3397.8], [630.0, 3130.5], [631.0, 4753.0], [616.0, 5817.714285714286], [617.0, 6009.5], [643.0, 4416.375], [640.0, 4546.0], [654.0, 3269.1153846153848], [655.0, 2843.3333333333335], [652.0, 4199.785714285715], [653.0, 7018.533333333333], [650.0, 2743.3571428571427], [651.0, 3766.5238095238096], [641.0, 3351.1666666666665], [642.0, 2602.25], [644.0, 5469.285714285715], [645.0, 3403.3636363636365], [646.0, 4064.692307692307], [647.0, 7097.625], [656.0, 2864.875], [670.0, 6046.833333333334], [671.0, 3941.384615384616], [668.0, 5129.5], [669.0, 7582.5], [666.0, 3299.529411764706], [667.0, 6688.111111111111], [664.0, 3231.0], [665.0, 3866.6], [657.0, 4554.4], [658.0, 5888.1], [659.0, 3223.3809523809523], [660.0, 3288.2352941176473], [661.0, 3291.0], [662.0, 3651.8125], [663.0, 4075.9333333333334], [648.0, 8162.642857142856], [649.0, 2695.6666666666665], [675.0, 3876.0], [672.0, 4085.0], [686.0, 2878.8333333333335], [687.0, 3192.85], [684.0, 3790.6923076923076], [685.0, 3926.0], [682.0, 3972.7272727272725], [683.0, 3356.533333333333], [673.0, 3852.740740740741], [674.0, 3145.6428571428573], [676.0, 3241.0769230769233], [677.0, 3770.6666666666665], [678.0, 3799.8695652173915], [679.0, 4167.900000000001], [688.0, 2931.3809523809523], [702.0, 2745.500000000001], [703.0, 2858.875], [700.0, 2328.526315789474], [701.0, 2805.25], [698.0, 4066.8333333333344], [699.0, 2404.642857142857], [696.0, 2564.090909090909], [697.0, 2509.866666666667], [689.0, 3407.7600000000007], [690.0, 3934.2333333333336], [691.0, 3050.333333333334], [692.0, 2639.4615384615386], [693.0, 2807.4999999999995], [694.0, 1920.666666666667], [695.0, 2055.6363636363635], [680.0, 3870.363636363637], [681.0, 3153.6], [707.0, 3629.9999999999995], [704.0, 4202.125], [718.0, 3590.750000000001], [719.0, 2977.142857142857], [716.0, 2946.714285714286], [717.0, 2824.0], [714.0, 2949.4516129032263], [715.0, 3451.6153846153848], [705.0, 3594.7999999999997], [706.0, 2113.4], [708.0, 3346.384615384615], [709.0, 3468.3928571428573], [710.0, 2276.444444444444], [711.0, 6007.714285714285], [720.0, 3411.7], [734.0, 2879.684210526316], [735.0, 4314.5], [732.0, 5009.133333333333], [733.0, 3835.9166666666665], [730.0, 2287.3636363636365], [731.0, 2474.0555555555547], [728.0, 3257.08695652174], [729.0, 2951.1000000000004], [721.0, 4438.928571428572], [722.0, 3927.636363636364], [723.0, 3733.6666666666665], [724.0, 2453.666666666667], [725.0, 2690.2272727272725], [726.0, 3121.153846153846], [727.0, 3344.8499999999995], [712.0, 3795.0], [713.0, 2757.2500000000005], [739.0, 3378.5588235294113], [736.0, 2398.6666666666665], [750.0, 4198.409090909091], [751.0, 2842.5454545454545], [748.0, 3429.9166666666665], [749.0, 5558.285714285715], [746.0, 4023.222222222222], [747.0, 3734.6666666666665], [737.0, 2569.1], [738.0, 2542.95], [740.0, 2686.2], [741.0, 3235.0], [742.0, 3580.1578947368416], [743.0, 4840.5], [752.0, 2714.3846153846152], [766.0, 4092.0476190476197], [767.0, 4226.875000000001], [764.0, 3055.6153846153843], [765.0, 5245.454545454545], [762.0, 24666.0], [763.0, 2923.444444444445], [760.0, 8143.0], [761.0, 14845.8], [753.0, 3562.5925925925926], [754.0, 3555.1999999999994], [755.0, 2578.3333333333335], [756.0, 9809.9], [757.0, 3653.782608695652], [758.0, 2603.1], [759.0, 4859.6], [744.0, 2221.571428571429], [745.0, 2759.157894736842], [771.0, 4354.935483870969], [768.0, 3010.25], [782.0, 3209.3529411764703], [783.0, 3173.6129032258063], [780.0, 3165.8750000000005], [781.0, 3097.0], [778.0, 4720.2307692307695], [779.0, 2864.055555555555], [769.0, 3606.135135135135], [770.0, 4169.6875], [772.0, 3764.833333333335], [773.0, 3536.6666666666665], [774.0, 3972.0499999999997], [775.0, 3200.285714285714], [784.0, 2737.9166666666665], [798.0, 2948.277777777778], [799.0, 3159.2857142857147], [796.0, 4525.000000000001], [797.0, 2745.5714285714284], [794.0, 2328.6818181818185], [795.0, 3282.6666666666665], [792.0, 2463.235294117647], [793.0, 4491.799999999999], [785.0, 2531.222222222222], [786.0, 2434.5714285714284], [787.0, 13273.4], [788.0, 2507.0], [789.0, 3846.8333333333335], [790.0, 3813.0], [791.0, 8117.444444444444], [776.0, 2740.8571428571427], [777.0, 3505.1999999999994], [805.0, 6667.75], [801.0, 2521.0], [800.0, 2482.045454545455], [802.0, 3425.8947368421054], [803.0, 3011.5000000000005], [804.0, 3807.294117647058], [816.0, 3535.8], [826.0, 4919.0], [825.0, 6060.5], [824.0, 5021.0], [807.0, 4935.0], [806.0, 5710.0], [828.0, 6237.0], [827.0, 6564.0], [830.0, 46221.0], [829.0, 4735.0], [831.0, 5091.0], [817.0, 5099.8], [819.0, 2581.0], [818.0, 5606.0], [820.0, 6923.0], [821.0, 2566.0], [822.0, 6084.5], [811.0, 2527.0], [809.0, 5686.0], [808.0, 6115.5], [813.0, 4773.6], [814.0, 2533.0], [856.0, 5287.0], [862.0, 5172.0], [858.0, 2992.0], [840.0, 10467.5], [841.0, 49151.0], [843.0, 5060.0], [842.0, 6040.0], [845.0, 33016.0], [844.0, 5056.0], [847.0, 5151.0], [832.0, 5026.0], [835.0, 5110.0], [834.0, 4882.5], [837.0, 4963.0], [836.0, 5304.0], [846.0, 5029.0], [860.0, 28441.5], [857.0, 5030.0], [855.0, 4955.0], [854.0, 4967.0], [853.0, 5613.5], [851.0, 5679.5], [850.0, 5022.0], [849.0, 6259.0], [848.0, 5867.0], [889.0, 5241.499999999999], [893.0, 5761.682926829269], [892.0, 4307.2], [895.0, 5330.2], [894.0, 8452.08], [891.0, 10835.624999999998], [890.0, 5139.75], [888.0, 5541.666666666667], [870.0, 5146.142857142857], [869.0, 5163.5], [867.0, 5011.0], [866.0, 5012.0], [865.0, 5196.0], [879.0, 5077.0], [878.0, 18824.75], [877.0, 5099.0], [876.0, 28571.0], [875.0, 45492.0], [874.0, 5174.25], [872.0, 16938.5], [887.0, 4986.0], [886.0, 5012.0], [885.0, 5014.5], [884.0, 12216.75], [883.0, 4932.0], [880.0, 5128.0], [925.0, 5595.86956521739], [919.0, 7967.210526315788], [918.0, 8017.8], [916.0, 7828.535714285716], [915.0, 7567.423076923077], [914.0, 6332.545454545455], [913.0, 9421.900000000001], [912.0, 7363.315789473684], [917.0, 8454.642857142859], [921.0, 9108.499999999998], [927.0, 7260.909090909091], [926.0, 8017.749999999999], [924.0, 5552.88888888889], [923.0, 6796.799999999997], [922.0, 6050.054054054053], [920.0, 7579.214285714285], [901.0, 12466.166666666668], [900.0, 11306.714285714286], [899.0, 5606.428571428572], [898.0, 14710.666666666668], [897.0, 5001.5], [896.0, 5101.333333333333], [902.0, 5543.2], [911.0, 8822.5], [910.0, 9825.500000000002], [909.0, 8523.666666666666], [908.0, 9397.2], [907.0, 8053.736842105263], [906.0, 6865.392857142857], [905.0, 8667.179487179488], [904.0, 8375.093023255815], [957.0, 6766.620689655174], [937.0, 7222.333333333333], [936.0, 7181.049180327869], [938.0, 5869.083333333334], [941.0, 9796.941176470587], [942.0, 5311.418604651163], [940.0, 9395.63157894737], [939.0, 7809.222222222225], [952.0, 3761.9545454545455], [935.0, 4425.64705882353], [934.0, 4604.416666666667], [933.0, 7568.791666666665], [932.0, 6368.695652173913], [931.0, 7837.903225806452], [928.0, 10834.0], [929.0, 8091.5714285714275], [930.0, 6121.500000000001], [943.0, 5469.871794871794], [945.0, 4205.1], [950.0, 4697.292682926829], [949.0, 6219.971428571429], [948.0, 5244.625], [947.0, 7418.499999999999], [946.0, 7710.457142857143], [951.0, 7420.500000000001], [953.0, 3712.1739130434785], [956.0, 3788.458333333334], [959.0, 3250.222222222222], [958.0, 3532.1666666666665], [944.0, 7392.043478260869], [955.0, 5878.310344827585], [954.0, 3988.5714285714284], [960.0, 4974.583333333333], [967.0, 5372.903225806451], [966.0, 7840.1578947368425], [965.0, 6727.125000000001], [964.0, 7338.6875], [963.0, 3810.304347826087], [962.0, 9229.48], [961.0, 6306.980000000001], [969.0, 6957.870967741935], [968.0, 5441.103448275862], [970.0, 6497.764705882353], [971.0, 7548.333333333332], [972.0, 6604.384615384615], [974.0, 3407.75], [975.0, 8964.904761904763], [973.0, 5903.971428571428], [980.0, 6650.346153846154], [979.0, 12234.944444444443], [978.0, 8146.88], [976.0, 4740.774193548387], [977.0, 5772.235294117647], [982.0, 13464.888888888889], [983.0, 6248.807692307693], [981.0, 6126.210526315789], [990.0, 7868.999999999998], [989.0, 4612.846153846152], [991.0, 6883.2058823529405], [985.0, 7293.565217391303], [987.0, 9352.84], [986.0, 10514.04347826087], [988.0, 4706.961538461538], [984.0, 6127.791666666668], [1018.0, 2497.0], [992.0, 8358.393939393942], [993.0, 10358.0], [994.0, 6784.439999999998], [996.0, 8953.375], [997.0, 4702.1875], [998.0, 7287.204545454545], [999.0, 6904.374999999999], [995.0, 9830.727272727272], [1017.0, 6505.0], [1016.0, 6384.0], [1006.0, 4984.6], [1004.0, 4914.083333333333], [1002.0, 4841.253731343283], [1003.0, 7601.446153846154], [1001.0, 7871.736842105262], [1000.0, 7128.760000000001], [1007.0, 10951.4], [1008.0, 2802.0], [1009.0, 6440.5], [1012.0, 6408.0], [1011.0, 6601.6], [1015.0, 6385.0], [1014.0, 6426.0], [1023.0, 2527.0], [1021.0, 6492.5], [1020.0, 6480.833333333333], [1032.0, 6421.333333333333], [1082.0, 6011.666666666667], [1072.0, 5035.0], [1026.0, 5532.875], [1034.0, 2418.0], [1030.0, 6479.8], [1036.0, 6449.0], [1042.0, 2595.0], [1040.0, 6487.6], [1044.0, 6470.833333333334], [1046.0, 17629.0], [1048.0, 6477.0], [1024.0, 6417.0], [1052.0, 6491.666666666667], [1062.0, 6449.0], [1060.0, 6468.25], [1066.0, 6398.0], [1070.0, 6287.0], [1068.0, 6343.5], [1086.0, 5609.0], [1080.0, 5756.0], [1078.0, 5777.0], [1076.0, 10595.0], [1074.0, 6275.6], [1084.0, 5544.0], [1112.0, 5683.0], [1114.0, 2288.0], [1108.0, 3590.3333333333335], [1106.0, 5464.75], [1104.0, 5486.0], [1110.0, 5533.642857142857], [1116.0, 3072.25], [1118.0, 5521.75], [1090.0, 5469.0], [1096.0, 12270.0], [1122.0, 2306.0], [1124.0, 5467.833333333334], [1128.0, 5161.0], [1130.0, 5068.0], [1142.0, 4988.666666666667], [1136.0, 5128.0], [1144.0, 4991.666666666667], [1150.0, 4932.8], [1120.0, 5319.5], [1180.0, 4384.333333333333], [1174.0, 4403.0], [1172.0, 4412.0], [1170.0, 4521.75], [1168.0, 4595.333333333333], [1152.0, 4927.0], [1156.0, 4912.4], [1166.0, 4624.0], [1182.0, 4299.0], [1214.0, 4271.916666666667], [1184.0, 4312.0], [1190.0, 14094.0], [1192.0, 4304.5], [1208.0, 15163.5], [1240.0, 4288.333333333333], [1216.0, 2427.789473684211], [1244.0, 11162.400000000001], [1242.0, 9423.75], [1238.0, 5245.769230769231], [1236.0, 3438.6666666666665], [1234.0, 4019.6], [1232.0, 3653.0], [1218.0, 4840.384615384616], [1220.0, 2643.3529411764707], [1222.0, 2763.555555555555], [1224.0, 4738.09090909091], [1226.0, 2991.3076923076924], [1228.0, 3467.5454545454545], [1230.0, 5886.888888888889], [1053.0, 6488.5], [1027.0, 6401.0], [1045.0, 6478.0], [1047.0, 6439.0], [1049.0, 4253.0], [1057.0, 5428.571428571428], [1063.0, 5079.0], [1061.0, 6469.333333333333], [1065.0, 6420.0], [1087.0, 5647.0], [1085.0, 5518.0], [1083.0, 5752.875], [1081.0, 6184.0], [1079.0, 5769.0], [1077.0, 6271.666666666666], [1073.0, 6293.333333333333], [1097.0, 4526.125000000001], [1145.0, 4952.5], [1105.0, 5488.624999999999], [1109.0, 12112.5], [1113.0, 5415.666666666667], [1115.0, 5413.5], [1089.0, 5487.142857142858], [1091.0, 5459.0], [1093.0, 5476.5], [1117.0, 5406.6], [1123.0, 5192.0], [1125.0, 5220.0], [1129.0, 5260.25], [1127.0, 5301.5], [1131.0, 5044.0], [1135.0, 5301.5], [1133.0, 5050.5], [1143.0, 3212.6666666666665], [1141.0, 5016.0], [1139.0, 4999.0], [1137.0, 5029.0], [1099.0, 5531.0], [1121.0, 5285.0], [1159.0, 4826.5], [1209.0, 3337.0], [1179.0, 13667.5], [1177.0, 4398.0], [1175.0, 4378.0], [1173.0, 4384.0], [1171.0, 4490.0], [1181.0, 4356.0], [1183.0, 4283.0], [1153.0, 4909.0], [1157.0, 4881.0], [1163.0, 4738.5], [1161.0, 4755.666666666667], [1165.0, 4677.333333333333], [1215.0, 2866.333333333333], [1189.0, 4313.666666666667], [1191.0, 4298.0], [1193.0, 4303.0], [1197.0, 10975.333333333334], [1195.0, 4308.333333333333], [1211.0, 4320.0], [1207.0, 4296.75], [1203.0, 4307.5], [1201.0, 6657.222222222223], [1243.0, 4210.733333333334], [1219.0, 2686.1764705882347], [1241.0, 4203.0], [1239.0, 15242.8], [1237.0, 3754.166666666667], [1235.0, 3776.875], [1233.0, 3299.6666666666665], [1217.0, 2603.8181818181815], [1221.0, 3988.533333333333], [1223.0, 9226.75], [1225.0, 2748.0399999999995], [1227.0, 5058.800000000001], [1229.0, 11648.0], [1231.0, 3347.875], [1.0, 23615.0]], "isOverall": false, "label": "Blazedemo - Get", "isController": false}, {"data": [[570.6720161931607, 4247.099399985538]], "isOverall": false, "label": "Blazedemo - Get-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1244.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5.75, "minX": 1.6105575E12, "maxY": 412740.75, "series": [{"data": [[1.61055756E12, 412740.75], [1.61055768E12, 161.4], [1.6105575E12, 81514.43333333333], [1.61055762E12, 249632.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61055756E12, 14708.5], [1.61055768E12, 5.75], [1.6105575E12, 2905.6666666666665], [1.61055762E12, 8893.333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61055768E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2580.5362796833797, "minX": 1.6105575E12, "maxY": 23274.333333333332, "series": [{"data": [[1.61055756E12, 5377.4550430023555], [1.61055768E12, 23274.333333333332], [1.6105575E12, 2580.5362796833797], [1.61055762E12, 2909.831896551715]], "isOverall": false, "label": "Blazedemo - Get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61055768E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2579.3562005277054, "minX": 1.6105575E12, "maxY": 23267.333333333332, "series": [{"data": [[1.61055756E12, 5374.658848058389], [1.61055768E12, 23267.333333333332], [1.6105575E12, 2579.3562005277054], [1.61055762E12, 2907.042672413787]], "isOverall": false, "label": "Blazedemo - Get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61055768E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 83.66666666666667, "minX": 1.6105575E12, "maxY": 2151.2793849361465, "series": [{"data": [[1.61055756E12, 2151.2793849361465], [1.61055768E12, 83.66666666666667], [1.6105575E12, 894.7915567282317], [1.61055762E12, 173.7870689655174]], "isOverall": false, "label": "Blazedemo - Get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61055768E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 283.0, "minX": 1.6105575E12, "maxY": 70364.0, "series": [{"data": [[1.61055756E12, 61737.0], [1.61055768E12, 25143.0], [1.6105575E12, 12367.0], [1.61055762E12, 70364.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61055756E12, 7440.8], [1.61055768E12, 25143.0], [1.6105575E12, 4998.5], [1.61055762E12, 1509.300000000031]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61055756E12, 46683.83999999998], [1.61055768E12, 25143.0], [1.6105575E12, 9409.699999999979], [1.61055762E12, 54223.450000000026]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61055756E12, 14684.59999999991], [1.61055768E12, 25143.0], [1.6105575E12, 6407.0], [1.61055762E12, 19430.449999999997]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61055756E12, 286.0], [1.61055768E12, 21065.0], [1.6105575E12, 478.0], [1.61055762E12, 283.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61055756E12, 3644.0], [1.61055768E12, 23615.0], [1.6105575E12, 2253.0], [1.61055762E12, 373.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61055768E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 341.0, "minX": 1.0, "maxY": 23104.0, "series": [{"data": [[2.0, 23104.0], [3.0, 6458.5], [5.0, 12884.0], [6.0, 10960.0], [7.0, 12662.0], [12.0, 10142.5], [13.0, 13075.0], [37.0, 429.0], [40.0, 3390.0], [74.0, 3087.0], [78.0, 4982.5], [81.0, 2855.0], [80.0, 5142.5], [82.0, 4243.5], [87.0, 4429.0], [84.0, 425.5], [85.0, 391.0], [91.0, 7150.0], [89.0, 419.0], [88.0, 349.0], [92.0, 375.5], [95.0, 361.0], [93.0, 395.0], [94.0, 353.5], [96.0, 419.5], [98.0, 356.5], [99.0, 367.5], [103.0, 432.0], [102.0, 2572.0], [101.0, 375.0], [100.0, 372.0], [104.0, 4698.0], [107.0, 406.0], [105.0, 357.0], [106.0, 370.5], [108.0, 5657.0], [111.0, 404.5], [109.0, 376.0], [113.0, 2524.0], [112.0, 2266.0], [115.0, 2454.0], [114.0, 378.0], [116.0, 2046.5], [117.0, 2523.0], [119.0, 3120.0], [123.0, 2578.0], [122.0, 3285.0], [121.0, 4883.5], [120.0, 341.0], [124.0, 2529.0], [132.0, 1322.5], [130.0, 5285.0], [131.0, 2526.0], [128.0, 5180.5], [129.0, 384.0], [139.0, 4765.5], [140.0, 1865.0], [142.0, 6251.5], [137.0, 7453.0], [136.0, 4626.0], [138.0, 4580.5], [148.0, 2452.5], [146.0, 4369.0], [150.0, 4674.0], [156.0, 1273.5], [165.0, 2417.0], [160.0, 3764.5], [163.0, 2802.0], [162.0, 2419.5], [166.0, 7073.5], [172.0, 2659.0], [180.0, 2204.0], [184.0, 819.5], [193.0, 3269.0], [202.0, 2317.5], [1.0, 12561.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[136.0, 19537.5], [81.0, 2649.0], [117.0, 4335.0], [122.0, 22502.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 202.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 341.0, "minX": 1.0, "maxY": 23093.5, "series": [{"data": [[2.0, 23093.5], [3.0, 6457.5], [5.0, 12883.0], [6.0, 10959.0], [7.0, 12661.0], [12.0, 10141.5], [13.0, 13074.0], [37.0, 428.0], [40.0, 3390.0], [74.0, 3087.0], [78.0, 4982.5], [81.0, 2855.0], [80.0, 5142.5], [82.0, 4243.5], [87.0, 4429.0], [84.0, 425.0], [85.0, 391.0], [91.0, 7150.0], [89.0, 418.0], [88.0, 348.0], [92.0, 375.0], [95.0, 359.0], [93.0, 393.0], [94.0, 353.0], [96.0, 419.5], [98.0, 355.0], [99.0, 366.0], [103.0, 432.0], [102.0, 2572.0], [101.0, 374.0], [100.0, 371.0], [104.0, 4698.0], [107.0, 405.0], [105.0, 355.0], [106.0, 369.5], [108.0, 5657.0], [111.0, 404.5], [109.0, 376.0], [113.0, 2524.0], [112.0, 2265.5], [115.0, 2454.0], [114.0, 376.5], [116.0, 2046.5], [117.0, 2517.0], [119.0, 3120.0], [123.0, 2549.0], [122.0, 3285.0], [121.0, 4883.5], [120.0, 341.0], [124.0, 2527.5], [132.0, 1322.0], [130.0, 5285.0], [131.0, 2519.0], [128.0, 5180.5], [129.0, 384.0], [139.0, 4765.0], [140.0, 1865.0], [142.0, 6251.5], [137.0, 7453.0], [136.0, 4626.0], [138.0, 4580.5], [148.0, 2452.5], [146.0, 4369.0], [150.0, 4674.0], [156.0, 1273.5], [165.0, 2417.0], [160.0, 3764.5], [163.0, 2796.0], [162.0, 2418.5], [166.0, 7067.5], [172.0, 2658.5], [180.0, 2204.0], [184.0, 819.5], [193.0, 3269.0], [202.0, 2314.5], [1.0, 12560.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[136.0, 19537.5], [81.0, 2649.0], [117.0, 4335.0], [122.0, 22502.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 202.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 35.53333333333333, "minX": 1.6105575E12, "maxY": 122.03333333333333, "series": [{"data": [[1.61055756E12, 122.03333333333333], [1.6105575E12, 35.53333333333333], [1.61055762E12, 72.98333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61055762E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6105575E12, "maxY": 127.85, "series": [{"data": [[1.61055756E12, 127.85], [1.61055768E12, 0.05], [1.6105575E12, 25.233333333333334], [1.61055762E12, 77.33333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.61055756E12, 0.016666666666666666], [1.6105575E12, 0.03333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.61055756E12, 0.03333333333333333]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61055768E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6105575E12, "maxY": 127.85, "series": [{"data": [[1.61055756E12, 127.85], [1.61055768E12, 0.05], [1.6105575E12, 25.233333333333334], [1.61055762E12, 77.33333333333333]], "isOverall": false, "label": "Blazedemo - Get-success", "isController": false}, {"data": [[1.61055756E12, 0.05], [1.6105575E12, 0.03333333333333333]], "isOverall": false, "label": "Blazedemo - Get-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61055768E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6105575E12, "maxY": 127.85, "series": [{"data": [[1.61055756E12, 127.85], [1.61055768E12, 0.05], [1.6105575E12, 25.233333333333334], [1.61055762E12, 77.33333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.61055756E12, 0.05], [1.6105575E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61055768E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

